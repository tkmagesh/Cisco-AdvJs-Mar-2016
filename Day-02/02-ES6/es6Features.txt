Const
const PI = 3.141593;
PI > 3.0;

Scoping
Block-Scoped Variables
for (let i = 0; i < a.length; i++) {
    let x = a[i];
    …
}
for (let i = 0; i < b.length; i++) {
    let y = b[i];
    …
}

let callbacks = [];
for (let i = 0; i <= 2; i++) {
    callbacks[i] = function () { return i * 2; };
}
callbacks[0]() === 0;
callbacks[1]() === 2;
callbacks[2]() === 4;


Block-Scoped Functions
{
    function foo () { return 1; }
    foo() === 1;
    {
        function foo () { return 2; }
        foo() === 2;
    }
    foo() === 1;
}


Arrow Functions
Expression Bodies
odds  = evens.map(v => v + 1);
pairs = evens.map(v => ({ even: v, odd: v + 1 }));
nums  = evens.map((v, i) => v + i);


Statement Bodies
nums.forEach(v => {
   if (v % 5 === 0)
       fives.push(v);
})

Lexical this
this.nums.forEach((v) => {
    if (v % 5 === 0)
        this.fives.push(v);
});

Extended Parameter Handling
Default Parameter Values
function f (x, y = 7, z = 42) {
    return x + y + z;
}
f(1) === 50;


Rest Parameter
function f (x, y, ...a) {
    return (x + y) * a.length;
}
f(1, 2, "hello", true, 7) === 9;


Spread Operator
var params = [ "hello", true, 7 ];
var other = [ 1, 2, ...params ]; // [ 1, 2, "hello", true, 7 ]
f(1, 2, ...params) === 9;

var str = "foo";
var chars = [ ...str ]; // [ "f", "o", "o" ]


Template Literals
String Interpolation
var customer = { name: "Foo" };

var card = { amount: 7, product: "Bar", unitprice: 42 };
message = `Hello ${customer.name},
want to buy ${card.amount} ${card.product} for
a total of ${card.amount * card.unitprice} bucks?`;


Enhanced Object Properties

Property Shorthand
let x = 10, y = 20;
var obj = {
    x : x,
    y : y
}

obj = { x, y };

Computed Property Names
obj = {
    foo: "bar",
    [ "prop_" + foo() ]: 42
};

Method Properties
obj = {
    foo (a, b) {
        …
    },
    bar (x, y) {
        …
    },
    quux (x, y) {
        …
    }
};

Destructuring Assignment
Array Matching
var list = [ 1, 2, 3 ];
var [ x, , y ] = list;
[ b, a ] = [ a, b ];


Object Matching, Shorthand Notation
var { op, lhs, rhs } = {
    op : '+',
    lhs : 10,
    rhs : 30
};


Parameter Context Matching
function f ([ name, val ]) {
    console.log(name, val);
}
f([ "bar", 42 ]);


function g ({ name: n, val: v }) {
    console.log(n, v);
}

function h ({ name, val }) {
    console.log(name, val);
}

g({ name: "foo", val:  7 });
h({ name: "bar", val: 42 });

Fail-Soft Destructuring
var list = [ 7, 42 ];
var [ a = 1, b = 2, c = 3, d ] = list;
a === 7;
b === 42;
c === 3;
d === undefined;

Modules
Value Export/Import
//  lib/math.js
export function sum (x, y) { return x + y };
export var pi = 3.141593;

//  someApp.js
import * as math from "lib/math";
console.log("2π = " + math.sum(math.pi, math.pi));

//  otherApp.js
import { sum, pi } from "lib/math";
console.log("2π = " + sum(pi, pi));

Default & Wildcard
//  lib/mathplusplus.js
export * from "lib/math";
export var e = 2.71828182846;
export default (x) => Math.exp(x);

//  someApp.js
import exp, { pi, e } from "lib/mathplusplus";
console.log("e^{π} = " + exp(pi));

Classes
Class Definition
class Shape {
    constructor (id, x, y) {
        this.id = id;
        this.move(x, y);
    }
    move (x, y) {
        this.x = x;
        this.y = y;
    }
}

Class Inheritance
class Rectangle extends Shape {
    constructor (id, x, y, width, height) {
        super(id, x, y);
        this.width  = width;
        this.height = height;
    }
}
class Circle extends Shape {
    constructor (id, x, y, radius) {
        super(id, x, y);
        this.radius = radius;
    }
}


Base Class Access
class Shape {
    …
    toString () {
        return `Shape(${this.id})`
    }
}
class Rectangle extends Shape {
    constructor (id, x, y, width, height) {
        super(id, x, y);
        …
    }
    toString () {
        return "Rectangle > " + super.toString();
    }
}
class Circle extends Shape {
    constructor (id, x, y, radius) {
        super(id, x, y);
        …
    }
    toString () {
        return "Circle > " + super.toString();
    }
}

Static Members
class Rectangle extends Shape {
    …
    static defaultRectangle () {
        return new Rectangle("default", 0, 0, 100, 100);
    }
}
class Circle extends Shape {
    …
    static defaultCircle () {
        return new Circle("default", 0, 0, 100);
    }
}
var defRectangle = Rectangle.defaultRectangle();
var defCircle    = Circle.defaultCircle();

Getter/Setter
class Rectangle {
    constructor (width, height) {
        this._width  = width;
        this._height = height;
    }
    set width  (width)  { this._width = width;               }
    get width  ()       { return this._width;                }
    set height (height) { this._height = height;             }
    get height ()       { return this._height;               }
    get area   ()       { return this._width * this._height; }
};
var r = new Rectangle(50, 20);
r.area === 1000;
